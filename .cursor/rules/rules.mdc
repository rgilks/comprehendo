---
description: Workspace coding standards and best practices
globs: ['**/*']
alwaysApply: true
---

# Code Quality & Style

- Code should be as simple, concise and elegant as possible
- Use blank lines to make code easier to read
- REMOVE ALL COMMENTS! unless they are really important
- Make sure we can elegantly handle errors, but don't overcomplicate error handling

# Linting & Type Safety

- NEVER ignore linting rules! fix the problems
- Always look for opportunities to strengthen the linting rules
- Always try and improve the type checking
- Try and avoid duplication between types
- Consolidate domain types in one location so we have a strong domain model
- Be rigorous in fixing warnings and errors

# State Management & Architecture

- Use Zustand to manage state in React
- Use immer in TypeScript where possible to avoid mutation
- Try to keep the state machine simple, consolidated and easy to understand
- When reviewing a file, should it be broken up? can it be improved? is this functionality in the right location within the project?

# Testing Strategy

- Keep the test coverage high
- We are using vitest for unit testing
- We are using playwright for end to end testing
- Don't write unit tests for UI components
- Do not use react-testing-library for testing
- Do not put tests in a separate folder, put them in the same folder as the code they are testing. Do not create **tests** folders.
- Add data-testid to all UI components for e2e testing
- Extract logic from UI components so it can be unit tested

# Logging & Debugging

- Don't add a logging facility, the console is fine
- Logging should be sufficient to diagnose problems at all levels but not overdone

# Documentation & Maintenance

- Please ALWAYS! keep the README file up to date
- Keep up to date documentation in the docs folder
- Try to keep documents concise and to the point, consolidate information where possible
- Keep the .gitignore file up to date
- Keep the .cursorignore file up to date - it should ignore large model files and build artifacts that slow down indexing

# Workflow Commands

- When I just type 'rcp' that means:
  1. Review all changes in each file, remove pointless comments
  2. Make sure changes have automated tests
  3. Run 'npm run check' fix any issues and analyse the results
     - Run: npm run verify (linting, TypeScript, formatting)
     - Run: npm run test:run -- --coverage (unit tests with coverage)
     - Run: npx playwright test --reporter=list (e2e tests)
     - Check coverage report in coverage/index.html
     - Aim for >80% coverage on business logic (exclude UI components)
  4. If any tests are failing including e2e tests, fix them and run 'npm run check' again. Do not proceed to the next step until all tests are passing.
  5. Test the application locally in the web browser as if you were an expert QA tester:
     - Follow the comprehensive QA testing guide in docs/qa-testing-guide.md
     - Open http://localhost:3000/en in browser
     - Verify page loads correctly
     - Test language selector functionality
     - Test generate button (click and verify response)
     - Test CEFR level display
     - Test all interactive elements
     - Perform cross-browser testing if time permits
  6. If there are no issues or causes for concern, update relevant documentation
  7. Git add, commit and push all changed files
  8. Check the GitHub action has run successfully:
     - Run: npm run check-github-action
     - Verify it returns "success" (not "failure" or "null")
     - If still running, wait and check again
  9. Test the production application in the web browser at https://comprehendo.fly.dev/en:
     - Follow the comprehensive QA testing guide in docs/qa-testing-guide.md
     - Open https://comprehendo.fly.dev/en in browser
     - Verify page loads correctly
     - Test language selector functionality
     - Test generate button (click and verify response)
     - Test CEFR level display
     - Test all interactive elements
     - Verify production deployment is working correctly
     - Perform cross-browser testing if time permits
  10. Update the application improvements document:
  - Document improvements identified during testing
  - Record performance issues, UX problems, or technical debt found
  - Update docs/todo.md with clear descriptions and priority
  - Include testing findings and recommended next steps
- When I just type 'p' that means "proceed"
- Dont give me a list of options to choose, devise the best plan you can and proceed with it.
